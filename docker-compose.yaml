name: ${COMPOSE_PROJECT_NAME?error}

services:
  ofelia:
    image: mcuadros/ofelia:0.3.17
    command: daemon --docker -f label=com.docker.compose.project=${COMPOSE_PROJECT_NAME?error}
    restart: unless-stopped
    volumes:
      - ./data/ofelia/:/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      # File log
      ofelia.save-folder: /logs
      ofelia.save-only-on-error: 0
      # Slack
      ofelia.slack-webhook: ${OFELIA_SLACK_WEBHOOK?error}
      ofelia.slack-only-on-error: 1
      # Folder Cleanup
      # Disk check (Every hour)
      ofelia.job-local.cleanup.schedule: "@hourly"
      ofelia.job-local.cleanup.command: sh -c "_ENV=${OFELIA_PROJECT_NAME?error} find /logs/ -type f -mtime +7 -delete -print"
    profiles:
      - core

  # Backend
  postgres:
    build:
      context: ./postgres/
      dockerfile: Dockerfile
      target: postgis
    restart: unless-stopped
    ports:
      - 127.0.0.1:${POSTGRES_DB_LOCAL_EXPOSE_PORT:-5432}:5432
    environment:
      # NOTE: This config is only used for db first startup only
      POSTGRES_DB: ${POSTGRES_DB:-mapswipe}
      POSTGRES_USER: ${POSTGRES_USER?error}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?error}
      # pgBackRest
      PGBACKREST_REPO1_TYPE: gcs
      PGBACKREST_REPO1_GCS_KEY: /run/secrets/gc_service_account_key
      PGBACKREST_REPO1_GCS_BUCKET: ${PGBACKREST_REPO1_GCS_BUCKET?error}
      PGBACKREST_REPO1_PATH: ${PGBACKREST_REPO1_PATH?error}
    command: postgres -c archive_mode=on -c archive_command="pgbackrest --stanza=main archive-push %p"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      # pgBackrest
      - ./data/pgbackrest/log/:/var/log/pgbackrest/
      - ./postgres/pgbackrest/pgbackrest.conf:/etc/pgbackrest/pgbackrest.conf:ro
    post_start:
      - command: /pgbackrest-setup.sh
        user: root
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      # NOTE: the cron format starts with seconds, instead of minutes. https://pkg.go.dev/github.com/robfig/cron?utm_source=godoc
      ofelia.enabled: "false"
      # TODO: Update this?
      # NOTE: Make sure to align this with the retention policies ./postgres/pgbackrest/pgbackrest.conf
      # Incremental Backups every day (At 22:00)
      ofelia.job-exec.incr.schedule: "0 0 22 * * *"
      ofelia.job-exec.incr.command: sh -c "_ENV=${OFELIA_PROJECT_NAME?error} pgbackrest --stanza=main backup --type=incr"
      ofelia.job-exec.incr.user: "postgres"
      ofelia.job-exec.incr.no-overlap: 1
      # Differential backup every week (At 02:30 on Monday)
      ofelia.job-exec.diff.schedule: "0 30 2 * * 1"
      ofelia.job-exec.diff.command: sh -c "_ENV=${OFELIA_PROJECT_NAME?error} pgbackrest --stanza=main backup --type=diff"
      ofelia.job-exec.diff.user: "postgres"
      ofelia.job-exec.diff.no-overlap: 1
      # Full backup every month (At 10:00 on day-of-month 1)
      ofelia.job-exec.full.schedule: "0 0 10 1 * *"
      ofelia.job-exec.full.command: sh -c "_ENV=${OFELIA_PROJECT_NAME?error} pgbackrest --stanza=main backup --type=full"
      ofelia.job-exec.full.user: "postgres"
      ofelia.job-exec.full.no-overlap: 1
      # Expire every day (At 01:30)
      ofelia.job-exec.expire.schedule: "0 30 01 * * *"
      ofelia.job-exec.expire.command: sh -c "_ENV=${OFELIA_PROJECT_NAME?error} pgbackrest --stanza=main expire"
      ofelia.job-exec.expire.user: "postgres"
      ofelia.job-exec.expire.no-overlap: 1
      # TODO: validate?
    secrets:
      - gc_service_account_key
    profiles:
      - core

secrets:
   gc_service_account_key:
     file: secrets/gc_service_account_key.json
